# Fiddichライブラリ テスト概要

## atomic-update.test.ts
**概要**: atomicUpdate操作に関するテスト

### テストケース
1. **基本的なatomicUpdate**
   - 単一のCellの原子的更新が正しく動作すること
   - 複数のCellの原子的更新が正しく動作すること
   - atomicUpdateから値を返せること
   - CellのonChangeがコミット時に呼ばれること

2. **atomicUpdate内でのComputed作成**
   - atomicUpdate内でComputedを作成して使用できること
   - 更新された値でComputedが作成されること
   - 複雑な状態作成パターンが動作すること

3. **ネストされたatomicUpdate**
   - ネストされたatomicUpdateが正しく処理されること（共有コンテキスト使用時）

4. **非同期atomicUpdate**
   - 非同期操作を含むatomicUpdateが動作すること
   - 複数の非同期操作を含むatomicUpdateが動作すること

5. **コンテキストの分離**
   - 並行するatomicUpdate間で変更が分離されること
   - 楽観的同時実行制御により競合が検出されること

## basic.test.ts
**概要**: 基本的なget/set操作に関するテスト

### テストケース
1. **Cell操作**
   - Cellの作成と値の取得が正しく動作すること
   - setで値を更新できること
   - 複数のCellが独立して動作すること
   - 同じ値をsetしてもバージョンが更新されないこと
   - 値が変更された時にバージョンが増加すること

2. **Computed操作**
   - Computedを作成して派生値を取得できること
   - 依存関係が変更されるとComputedが更新されること
   - 複数の依存関係を持つComputedが動作すること
   - ネストされたComputedが動作すること

3. **複雑な依存関係のシナリオ**
   - ダイヤモンド依存パターンが正しく処理されること
   - 条件付き依存関係が正しく処理されること

## circular-detection.test.ts
**概要**: 循環依存の検出に関するテスト

### テストケース
1. **非収束循環依存の検出**
   - 条件によって循環依存が発生する場合に正しくエラーが発生すること

2. **深い非循環依存の許可**
   - 深い依存関係チェーンでも循環でなければ正常に動作すること

## commit-rollback.test.ts
**概要**: コミットとロールバックの動作に関するテスト

### テストケース
1. **成功時のコミット**
   - エラーが発生しない場合、変更がコミットされること
   - Computedの再計算結果もコミットされること

2. **エラー時のロールバック**
   - エラー発生時にすべての変更がロールバックされること
   - Computed変更もロールバックされること
   - atomicUpdate内で作成した状態もロールバックされること
   - 非同期でのロールバックが動作すること

3. **部分実行のロールバック**
   - 複数の操作の途中でエラーが発生してもすべてロールバックされること
   - 依存関係の変更もロールバックされること

4. **エラーの伝播**
   - カスタムエラータイプとメッセージが保持されること
   - Computed再計算中のエラーが正しく処理されること

## compare-function.test.ts
**概要**: カスタム比較関数の動作に関するテスト

### テストケース
1. **CellのonChange**
   - 値が変更された時にonChangeが呼ばれること
   - 値が同じ場合はonChangeが呼ばれないこと
   - カスタム比較関数とonChangeが連携すること

2. **Cellのカスタム比較**
   - オブジェクト値に対してカスタム比較が使用されること
   - 配列値に対してカスタム比較が使用されること
   - カスタム比較に基づいて変更が伝播すること

3. **Computedのカスタム比較**
   - Computed値にカスタム比較が使用されること
   - 比較関数に従って値が同じ場合は伝播しないこと

4. **比較関数のエッジケース**
   - 比較関数内の例外が適切に処理されること
   - NaNの比較が正しく処理されること
   - ディープイコールの比較が動作すること

## dependency-tracking.test.ts
**概要**: 依存関係の追跡に関するテスト

### テストケース
1. **循環依存**
   - 直接的な循環依存が検出されること
   - 間接的な循環依存が検出されること
   - atomicUpdate内での循環依存が検出されること
   - 自己参照するComputedが検出されること

2. **動的依存関係**
   - 現れたり消えたりする依存関係が正しく処理されること

3. **複雑な依存関係パターン**
   - 複雑な依存関係チェーンが正しく処理されること
   - 複雑なシナリオで正しい依存関係が初期化されること

4. **atomicUpdate内での依存関係更新**
   - atomicUpdate内で依存関係が正しく追跡されること

## diamond-dependency.test.ts
**概要**: ダイヤモンド依存パターンの処理に関するテスト

### テストケース
1. **非atomicUpdate環境**
   - ダイヤモンドパターンでリーフノードが2回計算される可能性があること

2. **atomicUpdate環境**
   - ダイヤモンドパターンで各ノードが1回だけ計算されること

3. **詳細な実行フロー**
   - 実行順序の違いを示すテスト

## diamond-glitch.test.ts
**概要**: ダイヤモンド依存のグリッチ（一時的な不整合）テスト

### テストケース
1. **個別set操作での潜在的グリッチのデモンストレーション**
   - 2つの個別set操作で中間的な不整合状態が発生する可能性

2. **中間的な不整合状態の表示**
   - atomicUpdateを使用しない場合の一時的な不変条件違反
   - atomicUpdateを使用した場合のグリッチ回避

## dispose.test.ts
**概要**: リソース解放（dispose）機能に関するテスト

### テストケース
1. **CellのSymbol.dispose**
   - Cellがdisposeされ、dependentsがクリアされること
   - Cellがdisposable値を含む場合、その値もdisposeされること
   - 非disposable値でもエラーが発生しないこと
   - null/undefined値でも正常に処理されること

2. **ComputedのSymbol.dispose**
   - Computedがdisposeされてdependenciesとdependentsがクリアされること
   - 未初期化のComputedもdisposeできること

3. **set操作の自動dispose**
   - 新しいdisposable値をsetすると古い値が自動的にdisposeされること
   - atomicUpdateコンテキスト内での自動dispose
   - ロールバック時にはdisposeされないこと

4. **ops.dispose**
   - disposeがコミットまで遅延されること
   - ロールバック時にはdisposeされないこと
   - 複数のdisposeターゲットの処理
   - 非同期atomicUpdateでの動作
   - ネストされたatomicUpdateでの動作

5. **複雑なdisposeシナリオ**
   - disposeチェーンの正しい処理
   - rejectAllChangesとの相互作用
   - 依存関係を持つ状態の正しい順序でのdispose
   - 循環参照を持つdisposableオブジェクトの処理
   - disposeエラーの処理

## helper-functions.test.ts
**概要**: ヘルパー関数（nullable/optional）に関するテスト

### テストケース
1. **Nullableヘルパー**
   - nullable cellの作成と使用
   - nullable computedの作成

2. **Optionalヘルパー**
   - optional cellの作成と使用
   - optional computedの作成

3. **複雑なnullable/optionalパターン**
   - nullableチェーンとoptional computedの組み合わせ
   - nullableとoptionalパターンの組み合わせ

## lazy-initialization.test.ts
**概要**: Computedの遅延初期化に関するテスト

### テストケース
1. **基本的な遅延初期化**
   - 最初のアクセスまで値が計算されないこと
   - 最初のアクセス時に依存関係が確立されること
   - 初期化後は値がキャッシュされること

2. **atomicUpdate内での遅延初期化**
   - atomicUpdateコンテキストの値で初期化されること
   - atomicUpdate内でアクセスされなかったComputedの処理
   - 複雑な初期化シナリオ

3. **遅延初期化時の依存関係追跡**
   - ネストされたComputed依存関係が正しく追跡されること
   - 初期化時の条件付き依存関係の処理

4. **エッジケース**
   - 自己参照Computedの優雅な処理
   - 遅延と即座の初期化の混在時の一貫性維持

## minimal-computation.test.ts
**概要**: 最小限の計算実行に関するテスト

### テストケース
1. **ダイヤモンド依存パターン**
   - ダイヤモンドパターンで各ノードが1回だけ計算されること
   - 複数のダイヤモンドパターンの処理

2. **伝播の停止**
   - Computed値が変わらない場合は伝播が停止すること
   - 複雑な伝播停止チェーン

3. **条件付き依存関係**
   - 取られていない分岐は再計算されないこと

4. **バッチ更新**
   - atomicUpdate内で各依存関係が1回だけ計算されること
   - 複雑なバッチ更新の効率的な処理

5. **遅延評価**
   - アクセスされるまで計算されないこと
   - 依存関係チェーンでの遅延評価

6. **カスタム比較関数**
   - カスタム比較を使用した最小限の更新

7. **エッジケース**
   - 空の依存関係変更の処理
   - 高速な変更の効率的な処理

## pending.test.ts
**概要**: 非同期状態管理（pending）機能に関するテスト

### テストケース
1. **グローバルpending関数**
   - stateにpending promiseが設定されること
   - pendingが依存関係に伝播すること
   - promiseの解決後にpendingがクリアされること
   - promiseの拒否後にpendingがクリアされること
   - 同じpromiseを持つ複数の状態の効率的な処理

2. **atomicUpdate内のops.pending**
   - promise未指定時にatomicUpdateのpromiseが使用されること
   - 同期atomicUpdateではpromiseが必須であること
   - 非同期atomicUpdateで明示的なpromiseを受け入れること
   - atomicUpdate内で依存関係を通じて伝播すること

3. **複雑なpendingシナリオ**
   - 重複するpending状態の処理
   - 動的依存関係でのpending処理
   - ネストされたatomicUpdateでの動作
   - rejectAllChangesとの相互作用

4. **Computed初期化時のpending**
   - 遅延初期化時のpending処理
   - atomicUpdate初期化時のpending

5. **エラー処理**
   - finallyハンドラーがエラーを投げてもpendingがクリアされること

6. **パフォーマンスの考慮事項**
   - 大規模な依存関係グラフの正しい処理
   - 同じ状態を複数回訪問する際の重複作業の回避

## propagation-without-get.test.ts
**概要**: atomicUpdate内でgetを呼ばなくても変更が伝播することのテスト

### テストケース
1. **依存関係チェーン全体への伝播**
   - getを呼ばなくてもすべてのComputedに変更が反映されること

2. **複数の独立したチェーン**
   - 複数の独立したチェーンが正しく更新されること

3. **深い依存関係チェーン**
   - 10層の深いチェーンでも正しく伝播すること

4. **ダイヤモンド依存関係**
   - getなしでもダイヤモンド依存が正しく処理されること

## reject-all-changes.test.ts
**概要**: rejectAllChanges（全変更破棄）機能に関するテスト

### テストケース
1. **基本機能**
   - 同期atomicUpdateですべての変更が破棄されること
   - rejectAllChanges前の変更が破棄されること
   - rejectAllChanges後の操作は許可されること
   - 非同期atomicUpdateでの動作
   - 非同期でrejectAllChanges後の操作が許可されること

2. **複雑なシナリオ**
   - Computed依存関係での動作
   - 新しく初期化されたComputedのリセット
   - 変更が破棄された時にonChangeが呼ばれないこと
   - 複数のrejectAllChanges呼び出しの処理
   - 条件付き破棄での動作

3. **ネストされたatomicUpdate**
   - ネスト内でのrejectAllChangesが外側に影響しないこと
   - ネストと外側の両方でのrejectAllChangesの処理

4. **他の操作との相互作用**
   - dispose操作のキャンセル
   - rejectAllChanges後のdisposeの許可
   - touch操作のリセット
   - pending操作の正しい処理

5. **戻り値**
   - 破棄されてもatomicUpdateから値が返されること
   - 非同期戻り値の処理

6. **破棄後の動的依存関係**
   - 破棄後に正しい依存関係が使用されること

7. **エラー処理**
   - エラー時もrejectAllChangesが影響しないこと

## touch.test.ts
**概要**: touch（強制再評価）機能に関するテスト

### テストケース
1. **基本的なtouch動作**
   - Cellがtouchされてもバージョンが増加しないこと
   - Cellがtouchされると再計算がトリガーされること
   - Computedを直接touchすると強制的に再計算されること

2. **通知動作**
   - CellがtouchされるとonScheduledNotifyが呼ばれること
   - CellがtouchされてもonChangeは呼ばれないこと（値未変更）
   - Computedがtouchされた時のonScheduledNotify

3. **伝播動作**
   - 依存関係チェーン全体にtouchが伝播すること
   - Computed値が変わらなくても伝播すること

4. **atomicUpdate統合**
   - touch操作がバッチ処理されること
   - 同じatomicUpdate内でのtouchとsetの処理

5. **カスタム比較関数**
   - カスタム比較関数でのtouchの動作

6. **エッジケース**
   - 未初期化Computedのtouch処理
   - touchコミット時の循環依存検出
   - 計算中のtouchの処理

## type-utils.test.ts
**概要**: 型ユーティリティに関するテスト

### テストケース
1. **型抽出ユーティリティ**
   - 値の型が正しく抽出されること
   - nullableとoptional型での動作

2. **型ガード**
   - Cellを正しく識別すること
   - Computedを正しく識別すること
   - Stateを正しく識別すること
   - 型ガードによる型の絞り込み

3. **複雑な型パターン**
   - ネストされた状態構造の処理
   - 状態の配列での動作

## version-tracking.test.ts
**概要**: バージョン追跡に関するテスト

### テストケース
1. **valueVersion追跡**
   - 値が変更された時のみvalueVersionが増加すること
   - カスタム比較でのvalueVersion追跡

2. **dependencyVersion追跡**
   - 依存関係が変更された時にdependencyVersionが追跡されること
   - 依存関係が追加された時のdependencyVersion更新
   - 依存関係が削除された時のdependencyVersion更新

3. **atomicUpdateでのバージョン追跡**
   - atomicUpdateでバージョン更新がバッチ処理されること
   - 並行atomicUpdateのバージョン競合の処理

4. **ネストされたComputedでのバージョン追跡**
   - Computedチェーンを通じたバージョン追跡

## test-helpers.ts
**概要**: テストで使用するヘルパー関数群

### 提供される機能
- Disposableオブジェクトの作成
- 状態作成のヘルパー（シンプルチェーン、ダイヤモンド依存など）
- 非同期処理のヘルパー（wait、制御可能なPromise）
- 状態初期化のヘルパー